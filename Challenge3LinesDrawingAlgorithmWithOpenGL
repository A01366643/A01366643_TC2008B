// g++ challenge3.cpp -o challenge3 -lglut -lGLU -lGL
// ./challenge3


#include <GL/glut.h>
#include <iostream>

using namespace std;

void init (void){
    glClearColor (1.0, 1.0, 1.0, 0.0);    // Set display-window color to white.
    glMatrixMode (GL_PROJECTION);         // Set projection parameters.
    gluOrtho2D (0.0, 400.0, 0.0, 400.0);  //coordinate limits for the picture we want to display.
}


void points (void) {
    glClear (GL_COLOR_BUFFER_BIT);
    glColor3f (0.0, 0.4, 0.2);
    glBegin (GL_POINTS);

    int dx, dy, y, x1, y1, x2, y2;

    // caso 1
    
    x1 = 1;
    y1 = 2;
    x2 = 100;
    y2 = 20;

    dx = x2 - x1;
    dy = y2 - y1;

    for(int x = x1; x <= x2; x++){
      y = y1 + dy * (x - x1) / dx;
      glVertex2i (x, y);
    }
    
    // caso 2

    x1 = 10;
    y1 = 200;
    x2 = 50;
    y2 = 10;

    dx = x2 - x1;
    dy = y2 - y1;

    for(int x = x1; x <= x2; x++){
      y = y1 + dy * (x - x1) / dx;
      glVertex2i (x, y);
    }

    // caso 3

    x1 = 300;
    y1 = 300;
    x2 = 10;
    y2 = 10;

    dx = x2 - x1;
    dy = y2 - y1;

    for(int x = x1; x1 >= x2; x--){
      y = y1 + dy * (x - x1) / dx;
      glVertex2i (x, y);
    }

    // caso 4

    x1 = 200;
    y1 = 300;
    x2 = 250;
    y2 = 50;

    dx = x2 - x1;
    dy = y2 - y1;

    for(int x = x1; x <= x2; x++){
      y = y1 + dy * (x - x1) / dx;
      glVertex2i (x, y);
    }

    // caso 5

    x1 = 350;
    y1 = 350;
    x2 = 100;
    y2 = 300;

    dx = x2 - x1;
    dy = y2 - y1;


    for(int x = x1; x1 >= x2; x--){
      y = y1 + dy * (x - x1) / dx;
      glVertex2i (x, y);
    }
      
    glEnd ();
    glFlush();
}

int main (int argc, char** argv){
    glutInit (&argc, argv);    // Initialize GLUT.
    glutInitDisplayMode (GLUT_SINGLE | GLUT_RGB);    // Set display mode.
    glutInitWindowPosition (50, 100);    // Set top-left display-window position.
    glutInitWindowSize (400, 400);    // Set display-window width and height.
    glutCreateWindow ("Just another challenge"); // Create display window.
    init (); // Execute initialization procedure.
    glutDisplayFunc (points);
    glutMainLoop ( );    // Display everything and wait.
    return 0;
}
